
import java.util.HashSet;
import org.jbpm.document.Document;
import com.redhat.demos.bpms_kyc_demo.DocumentsNotOK;
import com.redhat.demos.bpms_kyc_demo.DocumentsCheckResponse;
import com.redhat.demos.bpms_kyc_demo.Customer;

//##################### Begin: Income Document rules #####################

rule "Income - Reset validation messages on Documents."
ruleflow-group "income-documents-check"
salience 100
lock-on-active
when
    $d:Document()
then
    $d.addAttribute("validationMessage", "messages: ");
end 

//############### Passport validation checks ################

//User "insertLogical" so the facts we insert will be removed when the input facts of this Rule Task are retracted.
rule "Income - Passport Document Check - Document starts with surname of customer"
ruleflow-group "income-documents-check"
when
    Customer($s:surname)
    $d:Document(name not str[startsWith] $s)
then
    System.out.println("Passport not OK. Does not start with name of customer");
    DocumentsNotOK docNotOK = new DocumentsNotOK();
    docNotOK.setDocumentId($d.getIdentifier());
    docNotOK.setType("passport");
    docNotOK.setMessage("Passport filename does not start with name of customer.");
    insertLogical(docNotOK);    
end


//############### Setting validation messages on documents. ################


rule "Income - Set Validation Messages on document"
ruleflow-group "income-documents-check"
when
    $d: Document($i: identifier, getAttribute("validationMessages") != null)
    DocumentsNotOK(documentId == $i, $m: message)
then
    System.out.println("Setting validation message on document.");
    String messages = $d.getAttribute("validationMessages");
    $d.addAttribute("validationMessages", messages + " | " + $m );
end


//############### Setting validation messages on documents. ################


//Run this rule last. Only if there are no DocumentNotOK facts for all our type will we say that our Income Documents are OK.
rule "Income - AllIncomeDocumentsOK"
ruleflow-group "income-documents-check"
salience -100
when
    $d: DocumentsCheckResponse();
    not(DocumentsNotOK(type == "passport"))
    
then
    System.out.println("All income documents OK.");
    $d.setDocumentsOk(true);
end

//##################### End: Income Document rules #####################

//##################################################################################################################//

//##################### Begin: Collateral rules #####################

//Reset any validation messages we have previously set on the Documents.
rule "Collateral - Reset validation messages on Documents."
ruleflow-group "collateral-check"
salience 100
lock-on-active
when
    $d:Document()
then
    $d.addAttribute("validationMessage", "messages: ");
end 


//############### Collateral validation checks ################

//User "insertLogical" so the facts we insert will be removed when the input facts of this Rule Task are retracted.
rule "Collateral - Passport Document Check - Document starts with surname of customer"
ruleflow-group "collateral-check"
when
    Customer($s:surname)
    $d:Document(name not str[startsWith] $s)
then
    System.out.println("Passport not OK. Does not start with name of customer");
    DocumentsNotOK docNotOK = new DocumentsNotOK();
    docNotOK.setDocumentId($d.getIdentifier());
    docNotOK.setType("collateral");
    docNotOK.setMessage("Collateral filename does not start with name of customer.");
    insertLogical(docNotOK);    
end


//############### Setting validation messages on documents. ################

rule "Collateral - Set Validation Messages on document"
ruleflow-group "collateral-check"
when
    $d: Document($i: identifier, getAttribute("validationMessages") != null)
    DocumentsNotOK(documentId == $i, $m: message)
then
    System.out.println("Setting validation message on document.");
    String messages = $d.getAttribute("validationMessages");
    $d.addAttribute("validationMessages", messages + " | " + $m );
end


//############### Setting validation messages on documents. ################


//Run this rule last. Only if there are no DocumentNotOK facts for all our type will we say that our Income Documents are OK.
rule "Collateral - AllIncomeDocumentsOK"
ruleflow-group "collateral-check"
salience -100
when
    $d: DocumentsCheckResponse();
    not(DocumentsNotOK(type == "passport"))
    
then
    System.out.println("All income documents OK.");
    $d.setDocumentsOk(true);
end

//##################### End: Collateral rules #####################



//##################### Begin: Milestone Document rules #####################

rule "Documents OK"
ruleflow-group "documents-check"
when
    DocumentsOK(type == "income")
then
    System.out.println("Documents OK");
    insert (new DocumentsOK("kyc"));
end

//##################### End: Milestone Document rules #####################
    
